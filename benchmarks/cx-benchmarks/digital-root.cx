package main

import "time"

// Function to add each digit form the value
func Sum(i i32, base i32) (out i32){
	out = 0 
	for ; i32.gt(i, 0); i = i32.div(i, base) {
		out = i32.add(out, (i32.mod(i, base)))
	}
}

//  Main function to calculate Digital Root
func digiatlRoot(in i32, base i32) (r []i32){
	r = append(r, in)
	r = append(r, 0)
	r[0] = in
	r[1] = 0
	var x i32
	for x = i32.add(0, r[0]); i32.gteq(x, base); x = i32.add(0, r[0]) {
		r[0] = Sum(x, base)
		r[1] = i32.add(r[1], 1)
	}
}

func main () () {
	var start i64
	start = time.UnixNano()

	if i32.gt(79563, 0){
		str.print("The value is 79563")
		var a []i32 = digiatlRoot(79563, 10)
		str.print("The digital root of 79563 is...")
		i32.print(a[0])
		str.print("and the persistence is...")
		i32.print(a[1])
	} else {
		str.print("I said GREATER than 0!")
	}

	var end i64
	end = time.UnixNano()
	str.print("Time elapsed (in nanoseconds)")
	i64.print(i64.sub(end, start))
}
