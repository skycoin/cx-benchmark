package main

type Point struct {
	x i32
	y i32
}

type Arrays struct {
	ints [200000]i32
	floats [200000]f32
}

type Structs struct {
	points []Point
	arrays []Arrays
}

func main () () {
	wd := os.GetWorkingDirectory()
	fileName := str.concat(wd, "serial")

	/*
          Point
        */

	testPoint := new Point{
		x: 10,
		y: 20
	}

	/*
          Arrays
        */

	var ints [200000]i32
	var floats [200000]f32

	var testArrays Arrays
	testArrays = new Arrays{
		ints: []i32{1, 2, 3},
		floats: []f32{1.0, 2.0, 3.0}
	}
	// testArrays = new Arrays{
	// 	ints: ints,
	// 	floats: floats
	// }

	/*
          Structs
        */
	
	point1 := new Point{
		x: 10,
		y: 20
	}

	point2 := new Point{
		x: 20,
		y: 30
	}

	arrays1 := new Arrays{
		ints: []i32{1, 2, 3},
		floats: []f32{1.0, 2.0, 3.0}
	}

	var points []Point
	points = []Point.append(points, point1)
	points = []Point.append(points, point2)
	
	var arrays []Arrays
	arrays = []Arrays.append(arrays, arrays1)
	
	var testStructs Structs
	testStructs.points = points
	testStructs.arrays = arrays







	/*
            Point
        */
	
	// serialization only
	start := time.now()
	for c := 0; c < 100000; c++ {
		byts := Point.serialize(testPoint)
		//os.WriteFile(fileName, byts)
	}
	duration := time.now() - start
	f64.print(duration)

	// serialize + write
	start = time.now()
	for c := 0; c < 100000; c++ {
		byts := Point.serialize(testPoint)
		os.WriteFile(fileName, byts)
	}

	duration = time.now() - start
	f64.print(duration)

	// write only
	byts := Point.serialize(testPoint)
	start = time.now()
	d := 0
	for c := 0; c < 100000; c++ {
		os.WriteFile(fileName, byts)
	}

	duration = time.now() - start
	f64.print(duration)




	/*
            Arrays
        */
	
	// serialization only
	start := time.now()
	for c := 0; c < 100000; c++ {
		byts := Arrays.serialize(testArrays)
	}
	duration := time.now() - start
	f64.print(duration)

	// serialize + write
	start = time.now()
	for c := 0; c < 100; c++ {
		byts := Arrays.serialize(testArrays)
		os.WriteFile(fileName, byts)
	}

	duration = time.now() - start
	f64.print(duration)

	// write only
	byts := Arrays.serialize(testArrays)
	start = time.now()
	d := 0
	for c := 0; c < 100; c++ {
		os.WriteFile(fileName, byts)
	}

	duration = time.now() - start
	f64.print(duration)

	



	// /*
        //     Structs
        // */

	// // serialization only
	// start := time.now()
	// for c := 0; c < 100000; c++ {
	// 	byts := Structs.serialize(testStructs)
	// 	//os.WriteFile(fileName, byts)
	// }
	// duration := time.now() - start
	// f64.print(duration)

	// // serialize + write
	// start = time.now()
	// for c := 0; c < 100000; c++ {
	// 	byts := Structs.serialize(testStructs)
	// 	os.WriteFile(fileName, byts)
	// }

	// duration = time.now() - start
	// f64.print(duration)

	// // write only
	// byts := Structs.serialize(testStructs)
	// start = time.now()
	// d := 0
	// for c := 0; c < 100000; c++ {
	// 	os.WriteFile(fileName, byts)
	// }

	// duration = time.now() - start
	// f64.print(duration)







	

	// read only
	// read + deserialization
	// deserialization


	// // read only
	// start = time.now()
	// for c := 0; c < 1000000; c++ {
	// 	byts := os.ReadFile(fileName)
	// }

	// duration = time.now() - start
	// i64.print(duration)

	// // read + deserialization
	// start = time.now()
	// for c := 0; c < 1000000; c++ {
	// 	byts := os.ReadFile(fileName)
	// 	dsPoint := Point.deserialize(byts)
	// }

	// duration = time.now() - start
	// i64.print(duration)
	
	
	// extByts := os.ReadFile(fileName)
	// dsPoint := Point.deserialize(extByts)
	// i32.print(dsPoint.x)
	// i32.print(dsPoint.y)
}
